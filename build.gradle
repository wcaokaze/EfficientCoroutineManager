/*
 * Copyright 2020 wcaokaze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

final VERSION = '0.0.0'

buildscript {
    ext.kotlin_version = '1.3.72'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.1"

        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    google()
    jcenter()
    mavenCentral()
}

dependencies {
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib'
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.6'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.6'
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/docs"

    configuration {
        moduleName = 'EfficientCoroutines'

        includes = ['src/main/java/packages.md']
        jdkVersion = 6

        skipEmptyPackages = true
        reportUndocumented = false

        sourceLink {
            path = "src/main/java"
            url = 'http://github.com/wcaokaze/EfficientCoroutines/blob/master/src/main/java'
            lineSuffix = '#L'
        }

        externalDocumentationLink {
            url = new URL('https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/')
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from dokka.outputDirectory
}

javadocJar.dependsOn(dokka)

final pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'wcaokaze'
            name 'wcaokaze'
            email 'wcaokaze@gmail.com'
        }
    }

    scm {
        url 'https://github.com/wcaokaze/EfficientCoroutines.git'
        connection 'scm:git:https://github.com/wcaokaze/EfficientCoroutines.git'
        developerConnection 'scm:git:https://github.com/wcaokaze/EfficientCoroutines.git'
    }
}

publishing {
    publications {
        EfficientCoroutines(MavenPublication) {
            groupId 'com.wcaokaze.efficientcoroutines'
            artifactId 'efficientcoroutines'
            version VERSION

            artifact sourcesJar
            artifact javadocJar
            artifact "$buildDir/libs/EfficientCoroutines.jar"

            pom.withXml {
                final rootNode = asNode()

                final dependenciesNode = rootNode['dependencies'][0]
                        ?: rootNode.appendNode('dependencies')

                rootNode.appendNode('name', 'EfficientCoroutines')

                for (dependency in configurations.implementation.allDependencies) {
                    if (dependency.name == 'unspecified') { continue }

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId',    dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version',    dependency.version)
                }

                rootNode.children().last() + pomConfig
            }
        }
    }
}

publish.dependsOn(sourcesJar, javadocJar, jar)

bintray {
    final props = new Properties()
    props.load(project.file('local.properties').newDataInputStream())

    user = props.getProperty('bintray.user')
    key = props.getProperty('bintray.apiKey')

    publications = ['EfficientCoroutines']

    pkg {
        repo = 'maven'
        name = 'EfficientCoroutines'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/wcaokaze/EfficientCoroutines'

        version {
            name = VERSION
            released = new Date()
            vcsTag = "v$VERSION"
        }
    }
}

bintrayUpload.dependsOn(publish)

